# .github/workflows/tests.yml
name: CI/CD Pipeline

# Déclenchement du workflow
on:
  push:
    branches: [ "main", "develop" ]  # Sur push vers main et develop
  pull_request:
    branches: [ "main" ]  # Sur PR vers main
  workflow_dispatch:  # Permet de lancer manuellement

# Variables d'environnement globales
env:
  PYTHON_VERSION: '3.9'
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: francoiskrukly
  IMAGE_NAME: oc-lettings-site

jobs:
  test:
    name: Tests, Linting et Coverage
    runs-on: ubuntu-latest
    
    # Variables d'environnement pour les tests
    env:
      DEBUG: 'False'
      SECRET_KEY: 'test-secret-key-for-ci-cd-only-not-production'
      ALLOWED_HOSTS: 'localhost,127.0.0.1'
    
    steps:
    # 1. Checkout du code
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2. Configuration Python
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'  # Cache des dépendances pip
        
    # 3. Installation des dépendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # 4. Linting avec flake8
    - name: Lint with flake8
      run: |
        echo "🔍 Vérification du code avec flake8..."
        flake8 --statistics --show-source
        echo "✅ Linting terminé avec succès"
        
    # 5. Préparation environnement Django
    - name: Prepare Django environment
      run: |
        echo "📁 Création des dossiers requis..."
        mkdir -p logs static staticfiles
        echo "🔧 Vérification de la configuration Django..."
        python manage.py check
        echo "✅ Configuration Django valide"
        
    # 6. Tests unitaires avec couverture
    - name: Run tests with coverage
      run: |
        echo "🧪 Exécution des tests avec couverture..."
        coverage run -m pytest -v
        echo "📊 Génération du rapport de couverture..."
        coverage report --show-missing --fail-under=80
        echo "📋 Génération du rapport HTML..."
        coverage html
        echo "🔍 Vérification des fichiers générés..."
        ls -la htmlcov/ || echo "❌ Dossier htmlcov/ non trouvé"
        echo "✅ Tests terminés avec succès"
        
    # 7. Upload du rapport de couverture HTML
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: success()  # Upload seulement si les tests réussissent
      with:
        name: coverage-report-${{ github.run_number }}
        path: htmlcov/
        retention-days: 7
        
    # 8. Collecte des fichiers statiques (test production)
    - name: Collect static files
      run: |
        echo "📦 Test de collecte des fichiers statiques..."
        python manage.py collectstatic --noinput
        echo "✅ Fichiers statiques collectés"
        
    # 9. Affichage du résumé
    - name: Display summary
      if: success()
      run: |
        echo "🎉 Tous les tests sont passés avec succès !"
        echo "📈 Couverture de code : $(coverage report --precision=1 | tail -1 | awk '{print $4}')"
        echo "🚀 Prêt pour la conteneurisation et le déploiement"
        
    # 10. Commentaire sur la PR avec les résultats (optionnel)
    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ Tests et linting passés avec succès ! La couverture de code est supérieure à 80%.'
          })

  # Job 2: Build et Push Docker (seulement sur main et si tests réussis)
  docker:
    name: Build et Push Docker
    runs-on: ubuntu-latest
    needs: test  # Attend que le job test soit terminé avec succès
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Seulement sur push vers main
    
    steps:
    # 1. Checkout du code
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2. Configuration Docker Buildx pour builds multi-architecture
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # 3. Connexion à Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    # 4. Extraction des métadonnées Git pour les tags
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    # 5. Build et Push de l'image Docker (optimisé)
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        # Single platform pour plus de vitesse (Render utilise linux/amd64)
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Cache GitHub Actions optimisé
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Build args pour optimisation
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        
    # 6. Résumé du build
    - name: Display build summary
      run: |
        echo "🎉 Image Docker buildée et pushée avec succès !"
        echo "📦 Repository: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"
        echo "📝 SHA: ${{ github.sha }}"
        echo "⚡ Build optimisé - platform unique, cache GitHub Actions"

  # Job 3: Déploiement automatique sur Render (seulement si Docker build réussi)
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test, docker]  # Attend que test et docker soient terminés avec succès
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Seulement sur push vers main
    
    steps:
    # 1. Déclenchement du déploiement Render
    - name: Deploy to Render
      run: |
        echo "🚀 Déclenchement du déploiement sur Render..."
        response=$(curl -s -w "%{http_code}" -o /tmp/deploy_response.json \
          -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}")
        
        if [ "$response" = "200" ] || [ "$response" = "201" ]; then
          echo "✅ Déploiement déclenché avec succès"
          echo "📋 Réponse Render:"
          cat /tmp/deploy_response.json
          echo ""
        else
          echo "❌ Erreur lors du déclenchement du déploiement"
          echo "📋 Code de réponse HTTP: $response"
          echo "📋 Réponse:"
          cat /tmp/deploy_response.json || echo "Aucune réponse reçue"
          exit 1
        fi
    
    # 2. Attendre et vérifier le déploiement
    - name: Wait for deployment
      run: |
        echo "⏳ Attente de la disponibilité du déploiement..."
        echo "🌐 URL de production: https://oc-lettings-siteeur.onrender.com"
        
        # Attendre 60 secondes pour laisser le temps au déploiement de commencer
        sleep 60
        
        # Tentatives de vérification (max 5 minutes)
        for i in {1..10}; do
          echo "🔍 Tentative $i/10 de vérification..."
          if curl -f -s --max-time 10 https://oc-lettings-siteeur.onrender.com/ > /dev/null; then
            echo "✅ Application déployée et accessible !"
            break
          else
            echo "⏳ Application pas encore prête, attente de 30 secondes..."
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "⚠️  Application peut encore être en cours de déploiement"
            echo "🔗 Vérifiez manuellement: https://oc-lettings-siteeur.onrender.com"
          fi
        done
    
    # 3. Résumé du déploiement
    - name: Deployment summary
      run: |
        echo "🎉 Processus de déploiement terminé !"
        echo "🌐 URL de production: https://oc-lettings-siteeur.onrender.com"
        echo "🔗 Admin: https://oc-lettings-siteeur.onrender.com/admin/"
        echo "📊 Logs Render: https://dashboard.render.com"
        echo "📝 Commit déployé: ${{ github.sha }}"
        echo "👤 Déployé par: ${{ github.actor }}"